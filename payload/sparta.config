#
# Resource manager configuration file
# - This file is read into the main resource script, so all entries are variables
#   and only the variables should be in upper case
#
# DO NOT edit this file manually as any changes will be lost when SPARTA performs
# an auto-update
# If you wish to alter the zpool to monitor or which service (cifs, nfs, iscsi)
# to monitor, edit the file(s) pointed to by SERVICES_TO_MONITOR and also
# ZPOOL_TO_MONITOR 
#

################################################################################
#
# Section 1: Initialisation of variables for use in the script
#

#
# This version of SPARTA
#
SPARTA_VER="0.18"

#
# Where we're going to store our performance logging data, config and scripts
#
LOG_DIR=/perflogs
LOG_DATASET=syspool/perflogs
LOG_CONFIG=$LOG_DIR/etc
LOG_SCRIPTS=$LOG_DIR/scripts
SPARTA_LOG=$LOG_DIR/sparta.log

#
# Setup variables for the auto download code
#
SPARTA_ETC=/perflogs/etc                                                        # Where we store the fingerprint/hash
SPARTA_HASH=sparta.hash                                                         # Name of temporary downloaded hash file 
SPARTA_HASH_URL="https://github.com/jasonba/sparta/raw/master/sparta.hash"      # The URL for the hash file

SPARTA_URL="https://github.com/jasonba/sparta/raw/master/sparta.tar.gz"         # The URL of the SPARTA tarball
SPARTA_FILE="/tmp/sparta.tar.gz"                                                # Local copy of the tarball

SPARTA_UPDATER_URL="https://github.com/jasonba/sparta/raw/master/auto-installer.sh"   # The program that performs the update
SPARTA_UPDATER="/tmp/auto-installer.sh"                                         # Local copy of the updater script

#
# The name we give the tarball
#
PERF_TARBALL=/var/tmp/nexenta_perf_data-`date +%Y-%m-%d_%H:%M:%S`.tar

#
# Saved configuration data for pool name and which services to monitor
#
SERVICES_TO_MONITOR="$LOG_CONFIG/.services_to_monitor"
ZPOOL_TO_MONITOR="$LOG_CONFIG/.zpool_to_monitor"

#
# Define some required storage sizes (in bytes) for later arithmetic operations
#
MEGABYTE=1048576
GIGABYTE=1073741824

#
# How much space needs to be available to start logging data (needs to be specified in bytes)
# In case you've not had your early cup of coffee, this is currently 1GB
#
LOG_SPACE_MIN=1073741824

#
# Limit how much data can be collected before we abort an automatic tarball generation (in bytes)
# The difficulty is the performance logging filesystem is usually compressed with gzip-9, thus
# when we look at how much is currently being used, this is the compressed value.
#
# As soon as you create a tarball with this data to an uncompressed filesystem, you'll get a 
# significant increase in usage on the destination.
# A recent test showed that a gzip'd file of 126MB expanded to 1.5GB, which is why we're
# overly cautious with the test, especially if your syspool is a SATADOM.
#
# There's no simple way to work out the uncompressed value (yes, it's doable with zdb) so we
# have to play safe and dramatically under-estimate a cut off limit.
# In the current version of SPARTA this is set to 128MB
#
LOG_USED_MAX=134217728

#
# Nexenta specific URLs and email addresses
#
FTP_SERVER="ftp.nexenta.com"
CRM_TOOL="http://login.salesforce.com"
NEX_SUPPORT_EMAIL="support@nexenta.com"

#
# Where our binaries live
#
CAT=/usr/bin/cat
CP=/usr/bin/cp
DATE=/usr/bin/date
DIFF=/usr/bin/diff
DLADM=/usr/sbin/dladm
DU=/usr/bin/du
#
# Needs a better test but for now detect whether this is running on
# ns3.x or not
#
if [ "`uname -v`" == "NexentaOS_134f" ]; then
    ECHO=/usr/sun/bin/echo
else
    ECHO=/usr/bin/echo
fi
GREP=/usr/bin/grep
GZIP=/usr/bin/gzip
IFCONFIG=/usr/sbin/ifconfig
IOSTAT=/usr/bin/iostat
KSTAT=/usr/bin/kstat
LOCKSTAT=/usr/sbin/lockstat
MDB=/usr/bin/mdb
MKDIR=/usr/bin/mkdir
MODINFO=/usr/sbin/modinfo
MPSTAT=/usr/bin/mpstat
NFSSTAT=/usr/bin/nfsstat
PRSTAT=/usr/bin/prstat
PSRINFO=/usr/sbin/psrinfo
SHARECTL=/usr/sbin/sharectl
TAR=/usr/sbin/tar
TR=/usr/bin/tr
VMSTAT=/usr/bin/vmstat
WGET=/usr/bin/wget
ZFS=/usr/sbin/zfs
ZPOOL=/usr/sbin/zpool

#
# The list of dtrace scripts we're interested in
#
ARC_ADJUST=$LOG_SCRIPTS/arc_adjust.v2.d
ARC_EVICT=$LOG_SCRIPTS/arc_evict.d
ARCSTAT_PL=$LOG_SCRIPTS/arcstat.pl
CIFS_TOP=$LOG_SCRIPTS/cifssvrtop
DNLC_LOOKUPS=$LOG_SCRIPTS/dnlc_lookups.d
HOTKERNEL=$LOG_SCRIPTS/hotkernel.priv
ISCSI_TOP=$LOG_SCRIPTS/iscsisvrtop
KMEM_REAP=$LOG_SCRIPTS/kmem_reap_100ms.d
LARGE_DELETE=$LOG_SCRIPTS/large_delete.d
LOCKSTAT_SPARTA=$LOG_SCRIPTS/lockstat_sparta.sh
METASLAB_ALLOC=$LOG_SCRIPTS/metaslab.sh
NFS_IO=$LOG_SCRIPTS/nfsio.d
NFS_RWTIME=$LOG_SCRIPTS/nfsrwtime.d
NFS_THREADS=$LOG_SCRIPTS/nfssrvutil.d
NFS_TOP=$LOG_SCRIPTS/nfssvrtop
TXG_MON=$LOG_SCRIPTS/txg_monitor.v3.d
ZIL_COMMIT_TIME=$LOG_SCRIPTS/zil_commit_time.d
ZIL_STAT=$LOG_SCRIPTS/zil_stat.d

#
# Options to various commands
#
ARC_SAMPLES=3
# 
# If this is set too high you'll see 'State Changed' messages too frequently
#
ARCSTAT_SLEEP=2

#
# Options for the cifssvrtop script
# -C = Don't clear the screen
#
CIFSSVRTOP_OPTS="-C"

#
# If you want to sample iostat data for just 2 minutes use this line instead of the
# subsequent version, which samples every 2 seconds indefinitely
#
#IOSTAT_OPTS="-Td -xntz 2 60"
IOSTAT_INFO_OPTS="-En"
IOSTAT_OPTS="-Td -xntz 2"

#
# Options for the iscsisvrtop script
# -C = Don't clear the screen
#
ISCSISVRTOP_OPTS="-C"

HOTKERNEL_SAMPLES=3
HOTKERNEL_SAMPLE_TIME=30
LOCKSTAT_SAMPLES=5
LOCKSTAT_SLEEP=10
LOCKSTAT_CONTENTION_OPTS="-CcwP -n 100000 -x aggrate=10hz -D 20 -s 40 sleep $LOCKSTAT_SLEEP"
LOCKSTAT_PROFILING_OPTS="-kIW -n 100000000 -x aggrate=10hz -D 20 -s 40 sleep $LOCKSTAT_SLEEP"
MEMSTAT_SAMPLES=3

#
# Options for mpstat
# Sample indefinitely every 2 seconds
#
MPSTAT_OPTS="-T d 2"

#
# Options for nfsstat
# At the moment we're interested in getting just the server side stats
#
NFSSTAT_OPTS="-T d -s"

#
# Options for the nfssvrtop script
# -C = Don't clear the screen
#
NFSSVRTOP_OPTS="-C"

# 
# Options for prstat
# Sample indefinitely every 2 seconds
#
PRSTAT_OPTS="-d d -mL 2"

# 
# If you want to sample vmstat for just 150 seconds, use the following line instead
# of the subsequent version, which samples every 5 seconds indefinitely
#
#VMSTAT_OPTS="-Td 5 30"
VMSTAT_OPTS="-Td 5"

ZFS_TUNABLE_LIST="zfs_txg_synctime_ms zfs_txg_timeout zfs_arc_shrink_shift arc_shrink_shift zfs_no_write_throttle swapfs_minfree metaslab_min_alloc_size ncsize"

#
# Files to collect
#
CONFIG_FILE_LIST="/etc/system /kernel/drv/sd.conf /kernel/drv/scsi_vhci.conf /etc/power.conf"

################################################################################
#
# This is where the per instance/system tunables live and should be thte only
# entries that need modifying
#

#
# The name of the zpool to monitor (required by txg_monitor*.d script and possibly others)
# Because we don't know the name of the zpool and there's no common naming convention, pick
# a default of syspool, although this will likely show uninteresting results
#
ZPOOL_NAME=syspool
if [ -r $LOG_CONFIG/.zpool_to_monitor ]; then
    . $LOG_CONFIG/.zpool_to_monitor
fi

#
# Which service do we wish to monitor?
#   NFS, CIFS or iSCSI
# 
# These are stored in a file $LOG_CONFIG/.services_to_monitor and take the form of
# TRACE_NFS={y|n}
# TRACE_CIFS={y|n}
# TRACE_ISCSI={y|n}
#
# We read in this file here as the primary configuration file but store the y/n data
# in this separate file, so it's easier to update sparta.config and keep pre-saved
# answers alone without having to munge the config file.
#
if [ -r $LOG_CONFIG ]; then
    . $LOG_CONFIG/.services_to_monitor
fi


################################################################################
#
# Stupid sanity check to make sure all the configuration has been read from this
# configuration file.
#
SPARTA_CONFIG_READ_OK=1
